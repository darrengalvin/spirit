"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/api/ai/route",{

/***/ "(rsc)/./app/api/ai/route.ts":
/*!*****************************!*\
  !*** ./app/api/ai/route.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ai */ \"(rsc)/./node_modules/ai/dist/index.mjs\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/esm/api/server.js\");\n\n\n\n// Create an OpenAI API client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY || \"\"\n});\n// IMPORTANT: Set the runtime to edge\nconst runtime = \"edge\";\nasync function POST(req) {\n    const requestId = Math.random().toString(36).substring(7);\n    console.log(`[${requestId}] üöÄ API Request received`);\n    try {\n        const { messages } = await req.json();\n        console.log(`[${requestId}] üìù Processing messages:`, JSON.stringify(messages, null, 2));\n        console.log(`[${requestId}] üì° Making request to OpenAI GPT-4o...`);\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${process.env.OPENAI_API_KEY}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-4o\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: \"You are a highly knowledgeable expert in wind energy and wind farms. Provide detailed, accurate, and well-structured responses. Use clear headings and sections when appropriate. Focus on technical accuracy while maintaining accessibility.\"\n                    },\n                    ...messages\n                ],\n                stream: true\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n        }\n        console.log(`[${requestId}] ‚úÖ OpenAI connection established, creating stream...`);\n        // Transform the response into a readable stream\n        const stream = new ReadableStream({\n            async start (controller) {\n                const reader = response.body.getReader();\n                const decoder = new TextDecoder();\n                let buffer = \"\";\n                try {\n                    while(true){\n                        const { done, value } = await reader.read();\n                        if (done) break;\n                        buffer += decoder.decode(value, {\n                            stream: true\n                        });\n                        const lines = buffer.split(\"\\n\");\n                        buffer = lines.pop() || \"\";\n                        for (const line of lines){\n                            if (line.startsWith(\"data: \")) {\n                                const data = line.slice(6).trim();\n                                if (data === \"[DONE]\") continue;\n                                try {\n                                    const parsed = JSON.parse(data);\n                                    const content = parsed.choices[0]?.delta?.content || \"\";\n                                    if (content) {\n                                        controller.enqueue(new TextEncoder().encode(content));\n                                    }\n                                } catch (err) {\n                                    console.warn(`[${requestId}] ‚ö†Ô∏è Failed to parse chunk:`, err);\n                                }\n                            }\n                        }\n                    }\n                } catch (error) {\n                    console.error(`[${requestId}] ‚ùå Stream error:`, error);\n                    controller.error(error);\n                } finally{\n                    controller.close();\n                    console.log(`[${requestId}] ‚ú® Stream completed`);\n                }\n            }\n        });\n        console.log(`[${requestId}] üì§ Sending streaming response...`);\n        return new ai__WEBPACK_IMPORTED_MODULE_2__.StreamingTextResponse(stream);\n    } catch (error) {\n        console.error(`[${requestId}] ‚ùå Error:`, error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Error processing your request\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/ai/route.ts\n");

/***/ })

});